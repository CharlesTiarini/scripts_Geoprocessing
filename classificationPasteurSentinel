import ee
import sys

ee.Initialize()

GRID_LIST = ['22LDH', '24LUR', '21KWV', '21JXH', '24KTE', '20NQJ']  
#['18LXQ', '18LXR', '18LYP', '18LYQ', '18LYR', '18LZP', '18LZQ', '18LZR', '18MXS', '18MXT', '18MXU', '18MYS', '18MYT', '18MYU', '18MYV', '18MZA', '18MZS', '18MZT', '18MZU', '18MZV', '19LBJ', '19LBK', '19LBL', '19LCH', '19LCJ', '19LCK', '19LCL', '19LDH', '19LDJ', '19LDK', '19LDL', '19LEH', '19LEJ', '19LEK', '19LEL', '19LFJ', '19LFK', '19LFL', '19LGJ', '19LGK', '19LGL', '19LHH', '19LHJ', '19LHK', '19LHL', '19MBM', '19MBN', '19MBP', '19MBQ', '19MBR', '19MCM', '19MCN', '19MCP', '19MCQ', '19MCR', '19MCS', '19MCV', '19MDM', '19MDN', '19MDP', '19MDQ', '19MDR', '19MDS', '19MDT', '19MDU', '19MDV', '19MEM', '19MEN', '19MEP', '19MEQ', '19MER', '19MES', '19MET', '19MEU', '19MEV', '19MFM', '19MFN', '19MFP', '19MFQ', '19MFR', '19MFS', '19MFT', '19MFU', '19MFV', '19MGM', '19MGN', '19MGP', '19MGQ', '19MGR', '19MGS', '19MGT', '19MGU', '19MGV', '19MHM', '19MHN', '19MHP', '19MHQ', '19MHR', '19MHS', '19MHT', '19MHU', '19MHV', '19NCA', '19NCB', '19NCC', '19NDA', '19NDB', '19NDC', '19NEA', '19NEB', '19NEC', '19NFA', '19NFB', '19NFC', '19NGA', '19NGB', '19NGC', '19NHA', '19NHB', '20KQG', '20KRG', '20LKM', '20LKN', '20LKP', '20LKQ', '20LKR', '20LLM', '20LLN', '20LLP', '20LLQ', '20LLR', '20LML', '20LMM', '20LMN', '20LMP', '20LMQ', '20LMR', '20LNL', '20LNM', '20LNN', '20LNP', '20LNQ', '20LNR', '20LPL', '20LPM', '20LPN', '20LPP', '20LPQ', '20LPR', '20LQH', '20LQJ', '20LQK', '20LQL', '20LQM', '20LQN', '20LQP', '20LQQ', '20LQR', '20LRH', '20LRJ', '20LRK', '20LRL', '20LRM', '20LRN', '20LRP', '20LRQ', '20LRR', '20MKA', '20MKB', '20MKC', '20MKD', '20MKE', '20MKS', '20MKT', '20MKU', '20MKV', '20MLA', '20MLB', '20MLC', '20MLD', '20MLE', '20MLS', '20MLT', '20MLU', '20MLV', '20MMA', '20MMB', '20MMC', '20MMD', '20MME', '20MMS', '20MMT', '20MMU', '20MMV', '20MNA', '20MNB', '20MNC', '20MND', '20MNE', '20MNS', '20MNT', '20MNU', '20MNV', '20MPA', '20MPB', '20MPC', '20MPD', '20MPE', '20MPS', '20MPT', '20MPU', '20MPV', '20MQA', '20MQB', '20MQC', '20MQD', '20MQE', '20MQS', '20MQT', '20MQU', '20MQV', '20MRA', '20MRB', '20MRC', '20MRD', '20MRE', '20MRS', '20MRT', '20MRU', '20MRV', '20NKF', '20NKG', '20NKK', '20NLF', '20NLG', '20NLH', '20NLJ', '20NLK', '20NMF', '20NMG', '20NMH', '20NMJ', '20NMK', '20NNF', '20NNG', '20NNH', '20NNJ', '20NNK', '20NPF', '20NPG', '20NPH', '20NPJ', '20NPK', '20NPL', '20NQF', '20NQG', '20NQH', '20NQJ', '20NQK', '20NQL', '20NRF', '20NRG', '20NRH', '20NRJ', '20NRK', '20NRL', '21HYE', '21JVG', '21JVH', '21JWF', '21JWG', '21JWH', '21JWJ', '21JXF', '21JXG', '21JXH', '21JXJ', '21JXK', '21JYF', '21JYG', '21JYH', '21JYJ', '21JYK', '21JYL', '21JYM', '21JYN', '21JZN', '21KTB', '21KUA', '21KUB', '21KUR', '21KUS', '21KUT', '21KUU', '21KVA', '21KVB', '21KVR', '21KVS', '21KVT', '21KVU', '21KVV', '21KWA', '21KWB', '21KWR', '21KWS', '21KWT', '21KWU', '21KWV', '21KXA', '21KXB', '21KXP', '21KXQ', '21KXR', '21KXS', '21KXT', '21KXU', '21KXV', '21KYA', '21KYB', '21KYP', '21KYQ', '21KYR', '21KYS', '21KYT', '21KYU', '21KYV', '21KZA', '21KZB', '21KZP', '21KZQ', '21KZR', '21KZS', '21KZT', '21KZU', '21KZV', '21LTC', '21LTD', '21LTE', '21LTF', '21LTG', '21LTH', '21LTJ', '21LTK', '21LTL', '21LUC', '21LUD', '21LUE', '21LUF', '21LUG', '21LUH', '21LUJ', '21LUK', '21LUL', '21LVC', '21LVD', '21LVE', '21LVF', '21LVG', '21LVH', '21LVJ', '21LVK', '21LVL', '21LWC', '21LWD', '21LWE', '21LWF', '21LWG', '21LWH', '21LWJ', '21LWK', '21LWL', '21LXC', '21LXD', '21LXE', '21LXF', '21LXG', '21LXH', '21LXJ', '21LXK', '21LXL', '21LYC', '21LYD', '21LYE', '21LYF', '21LYG', '21LYH', '21LYJ', '21LYK', '21LYL', '21LZC', '21LZD', '21LZE', '21LZF', '21LZG', '21LZH', '21LZJ', '21LZK', '21LZL', '21MTM', '21MTN', '21MTP', '21MTQ', '21MTR', '21MTS', '21MTT', '21MTU', '21MTV', '21MUM', '21MUN', '21MUP', '21MUQ', '21MUR', '21MUS', '21MUT', '21MUU', '21MUV', '21MVM', '21MVN', '21MVP', '21MVQ', '21MVR', '21MVS', '21MVT', '21MVU', '21MVV', '21MWM', '21MWN', '21MWP', '21MWQ', '21MWR', '21MWS', '21MWT', '21MWU', '21MWV', '21MXM', '21MXN', '21MXP', '21MXQ', '21MXR', '21MXS', '21MXT', '21MXU', '21MXV', '21MYM', '21MYN', '21MYP', '21MYQ', '21MYR', '21MYS', '21MYT', '21MYU', '21MYV', '21MZM', '21MZN', '21MZP', '21MZQ', '21MZR', '21MZS', '21MZT', '21MZU', '21MZV', '21NTA', '21NTB', '21NTC', '21NTE', '21NUA', '21NUB', '21NVA', '21NVB', '21NVC', '21NWA', '21NWB', '21NWC', '21NXA', '21NXB', '21NXC', '21NYA', '21NYB', '21NYC', '21NZA', '21NZB', '21NZC', '22HBH', '22HBJ', '22HBK', '22HCH', '22HCJ', '22HCK', '22HDK', '22JBL', '22JBM', '22JBN', '22JBP', '22JBQ', '22JBR', '22JBS', '22JBT', '22JCL', '22JCM', '22JCN', '22JCP', '22JCQ', '22JCR', '22JCS', '22JCT', '22JDL', '22JDM', '22JDN', '22JDP', '22JDQ', '22JDR', '22JDS', '22JDT', '22JEL', '22JEM', '22JEN', '22JEP', '22JEQ', '22JER', '22JES', '22JET', '22JFN', '22JFP', '22JFQ', '22JFR', '22JFS', '22JFT', '22JGP', '22JGQ', '22JGR', '22JGS', '22JGT', '22JHT', '22KBA', '22KBB', '22KBC', '22KBD', '22KBE', '22KBF', '22KBG', '22KBU', '22KBV', '22KCA', '22KCB', '22KCC', '22KCD', '22KCE', '22KCF', '22KCG', '22KCU', '22KCV', '22KDA', '22KDB', '22KDC', '22KDD', '22KDE', '22KDF', '22KDG', '22KDU', '22KDV', '22KEA', '22KEB', '22KEC', '22KED', '22KEE', '22KEF', '22KEG', '22KEU', '22KEV', '22KFA', '22KFB', '22KFC', '22KFD', '22KFE', '22KFF', '22KFG', '22KFU', '22KFV', '22KGA', '22KGB', '22KGC', '22KGD', '22KGE', '22KGF', '22KGG', '22KGU', '22KGV', '22KHA', '22KHB', '22KHC', '22KHD', '22KHE', '22KHF', '22KHG', '22KHU', '22KHV', '22LBH', '22LBJ', '22LBK', '22LBL', '22LBM', '22LBN', '22LBP', '22LBQ', '22LBR', '22LCH', '22LCJ', '22LCK', '22LCL', '22LCM', '22LCN', '22LCP', '22LCQ', '22LCR', '22LDH', '22LDJ', '22LDK', '22LDL', '22LDM', '22LDN', '22LDP', '22LDQ', '22LDR', '22LEH', '22LEJ', '22LEK', '22LEL', '22LEM', '22LEN', '22LEP', '22LEQ', '22LER', '22LFH', '22LFJ', '22LFK', '22LFL', '22LFM', '22LFN', '22LFP', '22LFQ', '22LFR', '22LGH', '22LGJ', '22LGK', '22LGL', '22LGM', '22LGN', '22LGP', '22LGQ', '22LGR', '22LHH', '22LHJ', '22LHK', '22LHL', '22LHM', '22LHN', '22LHP', '22LHQ', '22LHR', '22MBA', '22MBB', '22MBC', '22MBD', '22MBE', '22MBS', '22MBT', '22MBU', '22MBV', '22MCA', '22MCB', '22MCC', '22MCD', '22MCE', '22MCS', '22MCT', '22MCU', '22MCV', '22MDA', '22MDB', '22MDC', '22MDD', '22MDE', '22MDS', '22MDT', '22MDU', '22MDV', '22MEA', '22MEB', '22MEC', '22MED', '22MEE', '22MES', '22MET', '22MEU', '22MEV', '22MFA', '22MFB', '22MFC', '22MFD', '22MFE', '22MFS', '22MFT', '22MFU', '22MFV', '22MGA', '22MGB', '22MGC', '22MGD', '22MGE', '22MGS', '22MGT', '22MGU', '22MGV', '22MHA', '22MHB', '22MHC', '22MHD', '22MHE', '22MHS', '22MHT', '22MHU', '22MHV', '22NBF', '22NBG', '22NBH', '22NCF', '22NCG', '22NCH', '22NCJ', '22NCK', '22NDF', '22NDG', '22NDH', '22NDJ', '22NDK', '22NDL', '22NEF', '22NEG', '22NEH', '22NEJ', '22NFF', '22NFG', '22NFH', '22NGF', '23JKN', '23KKA', '23KKB', '23KKP', '23KKQ', '23KKR', '23KKS', '23KKT', '23KKU', '23KKV', '23KLA', '23KLB', '23KLP', '23KLQ', '23KLR', '23KLS', '23KLT', '23KLU', '23KLV', '23KMA', '23KMB', '23KMP', '23KMQ', '23KMR', '23KMS', '23KMT', '23KMU', '23KMV', '23KNA', '23KNB', '23KNQ', '23KNR', '23KNS', '23KNT', '23KNU', '23KNV', '23KPA', '23KPB', '23KPQ', '23KPR', '23KPS', '23KPT', '23KPU', '23KPV', '23KQA', '23KQB', '23KQQ', '23KQR', '23KQS', '23KQT', '23KQU', '23KQV', '23KRA', '23KRB', '23KRQ', '23KRR', '23KRS', '23KRT', '23KRU', '23KRV', '23LKC', '23LKD', '23LKE', '23LKF', '23LKG', '23LKH', '23LKJ', '23LKK', '23LKL', '23LLC', '23LLD', '23LLE', '23LLF', '23LLG', '23LLH', '23LLJ', '23LLK', '23LLL', '23LMC', '23LMD', '23LME', '23LMF', '23LMG', '23LMH', '23LMJ', '23LMK', '23LML', '23LNC', '23LND', '23LNE', '23LNF', '23LNG', '23LNH', '23LNJ', '23LNK', '23LNL', '23LPC', '23LPD', '23LPE', '23LPF', '23LPG', '23LPH', '23LPJ', '23LPK', '23LPL', '23LQC', '23LQD', '23LQE', '23LQF', '23LQG', '23LQH', '23LQJ', '23LQK', '23LQL', '23LRC', '23LRD', '23LRE', '23LRF', '23LRG', '23LRH', '23LRJ', '23LRK', '23LRL', '23MKM', '23MKN', '23MKP', '23MKQ', '23MKR', '23MKS', '23MKT', '23MKU', '23MKV', '23MLM', '23MLN', '23MLP', '23MLQ', '23MLR', '23MLS', '23MLT', '23MLU', '23MLV', '23MMM', '23MMN', '23MMP', '23MMQ', '23MMR', '23MMS', '23MMT', '23MMU', '23MNM', '23MNN', '23MNP', '23MNQ', '23MNR', '23MNS', '23MNT', '23MNU', '23MPM', '23MPN', '23MPP', '23MPQ', '23MPR', '23MPS', '23MPT', '23MQM', '23MQN', '23MQP', '23MQQ', '23MQR', '23MQS', '23MQT', '23MRM', '23MRN', '23MRP', '23MRQ', '23MRR', '23MRS', '23MRT', '24KTA', '24KTB', '24KTC', '24KTD', '24KTE', '24KTF', '24KTG', '24KTV', '24KUB', '24KUC', '24KUD', '24KUE', '24KUF', '24KUG', '24KVD', '24KVE', '24KVF', '24KVG', '24LTH', '24LTJ', '24LTK', '24LTL', '24LTM', '24LTN', '24LTP', '24LTQ', '24LTR', '24LUH', '24LUJ', '24LUK', '24LUL', '24LUM', '24LUN', '24LUP', '24LUQ', '24LUR', '24LVH', '24LVJ', '24LVK', '24LVL', '24LVM', '24LVN', '24LVP', '24LVQ', '24LVR', '24LWH', '24LWJ', '24LWK', '24LWL', '24LWM', '24LWN', '24LWP', '24LWQ', '24LWR', '24LXM', '24LXN', '24LXP', '24LXQ', '24LXR', '24LYN', '24LYP', '24LYQ', '24LYR', '24LZP', '24LZQ', '24LZR', '24MTA', '24MTB', '24MTS', '24MTT', '24MTU', '24MTV', '24MUA', '24MUB', '24MUC', '24MUS', '24MUT', '24MUU', '24MUV', '24MVA', '24MVB', '24MVS', '24MVT', '24MVU', '24MVV', '24MWA', '24MWB', '24MWS', '24MWT', '24MWU', '24MWV', '24MXA', '24MXS', '24MXT', '24MXU', '24MXV', '24MYS', '24MYT', '24MYU', '24MYV', '24MZS', '24MZT', '24MZU', '24MZV', '25LBK', '25LBL', '25MBM', '25MBN', '25MBP', '25MBQ', '25MCM', '25MCN']
#['22LDH', '24LUR', '21KWV', '21JXH', '24KTE', '20NQJ']

for grid in GRID_LIST:
  print(grid)

  year = 2017
  MGRS_TILE = grid
  TRAIN_DATA = ee.FeatureCollection("users/charlestiarini/uniaoPontos90") 
  SENTINEL_GRID = ee.FeatureCollection("users/charlestiarini/sentinelGRIDCut")
  sentinelCollection = ee.ImageCollection("COPERNICUS/S2")

  classFieldName = 'binario'

  pastureMapThreshold = 0.51

  rfNTrees = 300
  rfBagFraction = 0.5 
  rfVarPersplit = 6

  classificationArea = SENTINEL_GRID.filter(ee.Filter.eq('gridName',MGRS_TILE))

  samplingArea = SENTINEL_GRID.filterBounds(classificationArea.geometry().buffer(150000))

  localClass = ['Pastagem Cultivada','Pastagem Natural','Vegetação nativa', 'Lavrado e campinarana','Agricultura Anual', 'Cana-de-açucar', 'Agricultura Perene', 'Silvicultura']
  globalClass = ['Água']

  # allPoints = POINT_SAMPLES.randomColumn('random', seed)
  localSamples = TRAIN_DATA.filterBounds(samplingArea).filter(ee.Filter.inList('orig_class',localClass))
  globalSamples = TRAIN_DATA.filter(ee.Filter.inList('orig_class',globalClass))

  trainSamples = localSamples.merge(globalSamples)

  trainSamples = TRAIN_DATA.select(classFieldName).filterBounds(samplingArea)
   
  def samplingFn(obj):
    neitiles = ee.Feature(obj).get('gridName')
    return neitiles

  neibArea = ee.FeatureCollection(samplingArea).toList(ee.FeatureCollection(samplingArea).size()).map(samplingFn)

  neighborhoodArea = neibArea

  def clipCollection(img):
    MGRS_Grid = ee.String(img.get('MGRS_TILE'))
    gridSelect = SENTINEL_GRID.filter(ee.Filter.eq('gridName',MGRS_Grid))
    return img.clip(gridSelect)

  def getFeatureSpace():

    def spectralFeatures(image):
      getgrid = image
      qaImage = ee.Image(image.select(['QA60']))
          
      image = image.mask(qaImage.eq(0).And(image.gt(0)))
        
      ndvi = image.expression(indexes["NDVI"]).select([0],['NDVI'])
      cri = image.expression(indexes["CRI"]).select([0],['CRI'])
      ari = image.expression(indexes["ARI"]).select([0],['ARI'])
      rgr = image.expression(indexes["RGR"]).select([0],['RGR'])
      ndii = image.expression(indexes["NDII"]).select([0],['NDII'])
      psr = image.expression(indexes["PSR"]).select([0],['PSR'])
      satvi = image.expression(indexes["SATVI"]).select([0],['SATVI'])
      cai = image.expression(indexes["CAI"]).select([0],['CAI'])

      image = image.addBands([ndvi,cri,ari,rgr,ndii,psr,satvi,cai])

      return image.set({'MGRS_TILE':getgrid.get('MGRS_TILE')})
      
    def temporalFeatures(image):
      min = image.reduce(ee.Reducer.min())
      max = image.reduce(ee.Reducer.max())
      median = image.reduce(ee.Reducer.mean())
      stdv = image.reduce(ee.Reducer.stdDev())
      amp = image.reduce(ee.Reducer.max()).subtract(image.reduce(ee.Reducer.min())).rename(sentinelBandsWetAmp)
      result = ee.Image().select().addBands([min,max,median,amp,stdv])

      return result
    
    startDate = str(year-1)+'-07-01'
    endDate = str(year+1)+'-06-30'

    bands = ['B2','B3', 'B4', 'B5', 'B6', 'B7', 'B8',  'B8A', 'B11', 'B12', 'NDVI', 'CRI', 'ARI', 'RGR', 'NDII', 'PSR', 'SATVI', 'CAI'] 

    indexes = {
      'NDVI': "(b('B8A') - b('B4')) / (b('B8A') + b('B4'))",
      'CRI': "(1/b('B2')) - (1/b('B3'))",
      'ARI': "(1/b('B3')) - (1/b('B5'))",
      'RGR': "(b('B4')/b('B3'))",
      'NDII': "(b('B8') - b('B11')) / (b('B8') + b('B11'))",
      'PSR': "(b('B4') - b('B3')) / b('B6')",
      'SATVI': "(b('B11') - b('B4')) / (b('B11') + b('B4'))",
      'CAI': "(b('B12')/b('B11'))",
    }

    sentinelBandsWet = ['blue_wet', 'green_wet', 'red_wet', 'rededge1_wet', 'rededge2_wet', 'rededge3_wet', 'nir_wet', 'rededge4_wet', 'swir1_wet', 'swir2_wet', 'ndvi_wet', 'cri_wet', 'ari_wet', 'rgr_wet', 'ndii_wet', 'psr_wet', 'satvi_wet', 'cai_wet']
    sentinelBandsWetAmp = ['blue_wet_amp', 'green_wet_amp', 'red_wet_amp', 'rededge1_wet_amp', 'rededge2_wet_amp', 'rededge3_wet_amp', 'nir_wet_amp', 'rededge4_wet_amp', 'swir1_wet_amp', 'swir2_wet_amp', 'ndvi_wet_amp', 'cri_wet_amp', 'ari_wet_amp', 'rgr_wet_amp', 'ndii_wet_amp', 'psr_wet_amp', 'satvi_wet_amp', 'cai_wet_amp']
   
    neibData = []

    def onlyWetSeasonNei(image):
      wetMask = image.select("ndvi_wet").gte(wetThresholdNei)
      return image.mask(wetMask)
    
    totalSize = neighborhoodArea.size().getInfo()

    for i in range(totalSize):

      spectralDataNei = sentinelCollection \
        .filterMetadata('MGRS_TILE', 'equals', neighborhoodArea.get(i)) \
        .map(clipCollection) \
        .filterDate(startDate, endDate) \
        .map(spectralFeatures)
      
      wetThresholdNei = spectralDataNei \
        .select("NDVI") \
        .reduce(ee.Reducer.percentile([25]))

      wetSpectralDataNei = spectralDataNei \
        .select(bands, sentinelBandsWet) \
        .map(onlyWetSeasonNei)                     

      neibData.append(ee.Image(temporalFeatures(wetSpectralDataNei)).clip(SENTINEL_GRID.filter(ee.Filter.eq('gridName', neighborhoodArea.get(i)))))
    
    neibCol = ee.ImageCollection(neibData).mosaic()
    
    neibCollection =ee.Image(neibCol) 
      
    wetSpectralTemporalData = neibCollection.clip(classificationArea);

    return [wetSpectralTemporalData, neibCollection];

  featureSpace = getFeatureSpace()

  featureSpace1 = featureSpace[1]

  def getTrainedClassifier():
    classifier = ee.Classifier.randomForest(rfNTrees, rfVarPersplit, 1, rfBagFraction, False, year)
    classifier = classifier.setOutputMode('PROBABILITY')

    trainSamplesFeeded = featureSpace1.sampleRegions(
      collection = trainSamples,
      properties = [classFieldName],
      scale = 20,
      tileScale = 6
    )
    return classifier.train(trainSamplesFeeded, classFieldName)

  classifier = getTrainedClassifier()

  def classify():
    featureSpaceD = ee.Image(featureSpace[0])
    return featureSpaceD.classify(classifier).select(0)

  pastureContinuousResult = classify()
    
  pastureContinuousFilename =  'Pasture_Continuous_' + str(MGRS_TILE) + '_' + str(year)
 
  image = pastureContinuousResult.multiply(10000).int16()
  description = pastureContinuousFilename
  fileNamePrefix = str(pastureContinuousFilename)
  region = ee.Geometry.Polygon(classificationArea.geometry().bounds().coordinates()).getInfo()["coordinates"]
  scale = 20
  maxPixels = 1.0E13

  task = ee.batch.Export.image.toDrive(image, description, None, fileNamePrefix, None, region, scale, None, None, maxPixels)

  task.start()
